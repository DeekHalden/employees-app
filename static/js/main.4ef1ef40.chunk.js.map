{"version":3,"sources":["utils/alphabet.ts","hoc/withCheckedState.tsx","providers/CheckerProvider.tsx","components/Employee/index.ts","components/Employee/Employee.tsx","components/Char/Char.tsx","providers/EmployeesProvider.tsx","pages/Employees/Employees.tsx","pages/Home/Home.tsx","utils/months.ts","components/AppAside/AppAside.tsx","components/AppContent/AppContent.tsx","components/AppHeader/AppHeader.tsx","services/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Component","CheckerContext","React","createContext","selectedItems","setSelectedItems","action","AppContextProvider","Provider","EmployeeWithCheckedState","Consumer","employee","lastName","firstName","props","context","useContext","useState","selectedItem","setSelectedItem","useEffect","find","s","id","className","onChange","value","payload","type","checked","Char","char","charsEmployees","employeesLength","length","classname","map","e","EmployeesContext","employees","setEmployees","EmployeesContextProvider","Employees","Object","entries","HomePage","monthNames","getMonthName","month","Date","getMonth","AppAside","grouped","reduce","acc","dob","push","isEmpty","keys","AppContent","exact","path","component","AppHeader","activeClassName","to","employeesService","fetch","json","data","alphabet","i","String","fromCharCode","initialSelected","JSON","parse","localStorage","getItem","reducer","state","itemIndex","findIndex","item","splice","setItem","stringify","App","useReducer","dispatch","fetchEmployees","a","console","log","groupElements","array","charAt","toLocaleLowerCase","sortElements","sort","b","localeCompare","then","basename","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ef1ef40.chunk.js","sourcesContent":["import { IAlphabet } from \"../interfaces/Alphabet\";\n\nconst a = 97;\nexport let alphabet: IAlphabet = {};\nfor (var i = 0; i < 26; i++) {\n  alphabet[String.fromCharCode(a + i)] = [];\n}\n","import React, { useContext, useEffect, useState } from 'react'\nimport { IEmployeeModel } from '../interfaces'\nimport { CheckerContext } from '../providers/CheckerProvider'\nimport { AppContextInterface } from '../providers/CheckerProvider'\nimport './withCheckerState.sass'\ntype IEmployee = {\n  employee: IEmployeeModel\n}\n\n\nexport const withCheckedState = <P extends object>(\n  Component: any\n): React.FC<P & IEmployee> => ({\n  ...props\n}: IEmployee) => {\n\n    const context: AppContextInterface = useContext(CheckerContext);\n\n    const setSelected = (value: IEmployeeModel): void => {\n      context.setSelectedItems({ payload: value })\n    }\n\n    const [selectedItem, setSelectedItem] = useState<boolean>(false)\n\n    useEffect(() => {\n      setSelectedItem(context.selectedItems.find((s: IEmployeeModel) => s.id === props.employee.id) ? true : false)\n    }, [context.selectedItems, props.employee.id])\n\n    // useEffect(() => {\n    //   console.log(context)\n    // }, [context]);\n    return (\n      <div className='state-checker'>\n        <input\n          onChange={() => setSelected(props.employee)}\n          type=\"checkbox\" className='control-checkbox state-checker__control'\n          checked={selectedItem}\n        />\n        <Component {...props} />\n      </div>\n    );\n  }\n\n","import React from 'react'\nimport { IEmployeeModel } from '../interfaces'\nimport { IAction } from '../interfaces/Reducer'\n\nexport type AppContextInterface = {\n  selectedItems: IEmployeeModel[], /* Map<string, any>, */\n  setSelectedItems: (action: IAction) => void;\n}\n\nexport const CheckerContext = React.createContext<AppContextInterface>({\n  selectedItems: []/* new Map<string, any>(), */,\n  setSelectedItems: (action: IAction) => { },\n})\n\nexport const AppContextProvider = CheckerContext.Provider\nexport const AppContextConsumer = CheckerContext.Consumer\n\nexport const withAppContext = <P extends Object>(\n  Component: any,\n): React.FC<P & AppContextInterface> => {\n  return (props: any) => {\n\n    return (\n      <AppContextConsumer>\n        {value => <Component {...props} appContext={value} />}\n      </AppContextConsumer>\n    );\n  };\n}","import { withCheckedState } from \"../../hoc/withCheckedState\";\nimport { EmployeeComponent } from \"./Employee\";\nexport { EmployeeComponent } from './Employee'\nexport const EmployeeWithCheckedState = withCheckedState(EmployeeComponent)\n","import React, { ReactElement } from 'react'\nimport { IEmployeeModel } from '../../interfaces'\n\ntype IEmployee = {\n  employee: IEmployeeModel\n}\n\nexport const EmployeeComponent: React.FC<IEmployee> = ({ employee }: IEmployee): ReactElement => {\n  return (\n    <div >{employee.lastName} {employee.firstName}</div>\n  )\n}","import React, { ReactElement } from 'react'\nimport { IEmployeeModel } from '../../interfaces'\nimport { EmployeeWithCheckedState } from '../Employee'\nimport './Char.sass'\nimport classname from 'classnames';\n\n// const className = classname('char__caption')\n\ntype CharProps = {\n  char: string;\n  charsEmployees: IEmployeeModel[]\n}\n\nexport const Char: React.FC<CharProps> = ({ char, charsEmployees }: CharProps): ReactElement => {\n\n  const employeesLength = charsEmployees.length\n\n  const renderEmployees = (): ReactElement => {\n    return (\n      <div>\n        {\n          employeesLength ? <div>{charsEmployees.map((e) => <EmployeeWithCheckedState employee={e} key={e.id}></EmployeeWithCheckedState>)}</div> : <div>-</div>\n        }\n      </div>\n    )\n  }\n  return (\n    <div className='char'>\n      <div className={classname('char__caption', { \"is-active\": employeesLength })}>{char}</div>\n      <div className=\"char__items\">{renderEmployees()}</div>\n    </div>\n  );\n}","import React from 'react'\nimport { IAlphabet } from '../interfaces/Alphabet'\nimport { IAction } from '../interfaces/Reducer'\n\nexport type EmployeesContextInterface = {\n  employees: IAlphabet;\n  setEmployees?: (action: IAction) => void;\n}\n\nexport const EmployeesContext = React.createContext({\n  employees: {},\n  setEmployees: (action: IAction) => {}\n})\n\nexport const EmployeesContextProvider = EmployeesContext.Provider;\nexport const EmployeesContextConsumer = EmployeesContext.Consumer;\n","import React, { ReactElement, useContext } from 'react'\nimport { Char } from '../../components/Char/Char'\nimport { IEmployeeModel } from '../../interfaces'\nimport { EmployeesContext, EmployeesContextInterface } from '../../providers/EmployeesProvider'\n\nimport './Employees.sass'\n\nexport const Employees: React.FC = (): ReactElement => {\n  const {employees}: EmployeesContextInterface = useContext(EmployeesContext)\n  return (\n    <div className='employees'>\n      {\n        Object\n          .entries(employees)\n          .map(([char, charsEmployees]: [string, IEmployeeModel[]]) =>\n            <Char key={char} char={char} charsEmployees={charsEmployees} />\n          )\n      }\n    </div>\n  )\n}","import React, { ReactElement } from 'react'\nimport './home.sass'\nexport const HomePage: React.FC = (): ReactElement => {\n  return (\n    <div className='section'>Welcome to homepage</div>\n  )\n}","export const monthNames: string[] = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nexport const getMonthName = (month: string | Date) => {\n  return monthNames[new Date(month).getMonth()]\n}","import React, { ReactElement, useContext } from 'react'\nimport { IEmployeeModel } from '../../interfaces'\nimport { CheckerContext } from '../../providers/CheckerProvider'\nimport { AppContextInterface } from '../../providers/CheckerProvider'\nimport { Char } from '../../components/Char/Char'\nimport { getMonthName } from '../../utils/months'\ninterface IMonthsGroup {\n  [key: string]: IEmployeeModel[]\n}\n\nexport const AppAside: React.FC = (): ReactElement => {\n\n  const context: AppContextInterface = useContext(CheckerContext)\n\n  const grouped = context.selectedItems.reduce((acc: IMonthsGroup, employee: IEmployeeModel) => {\n    acc[getMonthName(employee.dob)] = acc[getMonthName(employee.dob)] || []\n    acc[getMonthName(employee.dob)].push(employee);\n    return acc\n  }, {})\n\n  const isEmpty = !Object.keys(grouped).length\n\n  const renderMonthWithEmployees = () => {\n    return (\n      <div>\n        {\n          Object.entries(grouped).map(([month, employees]: [string, IEmployeeModel[]]) => {\n            return (\n              <Char key={month} char={month} charsEmployees={employees}></Char>\n            )\n          })\n        }\n      </div>\n    )\n  }\n\n  return (\n    <div className='aside'>\n      <div className=\"aside__caption\">\n\n      </div>\n      <div className=\"aside__content\">\n        {isEmpty ? 'No selected employees' : renderMonthWithEmployees()}\n      </div>\n    </div>\n\n  )\n}","import React, { ReactElement } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Employees } from \"../../pages/Employees/Employees\";\nimport { HomePage } from '../../pages/Home/Home'\nimport { AppAside } from \"../AppAside/AppAside\";\nimport './AppContent.sass'\n\nexport const AppContent: React.FC = (): ReactElement => {\n  return (\n    <Switch>\n      <Route exact path={'/'}><HomePage /></Route>\n      <Route path={'/employees'}>\n        <div className='content'>\n          <div className='content__main'>\n            <Employees />\n          </div>\n          <div className='content__aside'>\n            <AppAside />\n          </div>\n        </div>\n      </Route>\n      <Route component={HomePage}/>\n    </Switch>\n\n  )\n}","import React, { ReactElement } from 'react'\nimport { NavLink } from 'react-router-dom'\n\nimport './AppHeader.sass'\n\nexport const AppHeader: React.FC = (): ReactElement => {\n  return (\n    <header className='header'>\n      <nav className='header__nav'>\n        <ul className='header__list'>\n          <li className='header__list-item'>\n            <NavLink exact activeClassName='is-active' className='link link--variant_primary' to='/'>Home</NavLink>\n          </li>\n          <li className='header__list-item'>\n            <NavLink exact activeClassName='is-active' className='link link--variant_primary' to='/employees'>Employees</NavLink>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  )\n}","import { IEmployeeModel } from \"../interfaces\";\n\nexport const employeesService = {\n  async getData(): Promise<IEmployeeModel[]> {\n    try {\n      const data = await (\n        await fetch(\n          \"https://yalantis-react-school-api.yalantis.com/api/task0/users\"\n        )\n      ).json();\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  },\n};\n","import React, { useEffect, useReducer, useState } from 'react';\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nimport { AppContent } from './components/AppContent/AppContent';\nimport { AppHeader } from './components/AppHeader/AppHeader';\nimport { IEmployeeModel } from './interfaces';\nimport { IAlphabet } from './interfaces/Alphabet';\nimport { IAction, IState } from './interfaces/Reducer';\nimport { AppContextProvider } from './providers/CheckerProvider';\nimport { EmployeesContextProvider } from './providers/EmployeesProvider';\nimport { employeesService } from './services';\nimport { alphabet } from './utils';\n\nconst initialSelected = {\n  selectedItems: JSON.parse(localStorage.getItem('selectedItems') || '[]')\n};\n\n\nfunction reducer(state: IState, action: IAction) {\n  switch (action.type) {\n    default:\n      const itemIndex = state.selectedItems.findIndex((item: IEmployeeModel) =>  action.payload.id === item.id) \n      const data = [...state.selectedItems]\n      if (itemIndex > -1) {\n        data.splice(itemIndex, 1)\n      } else {\n        data.push(action.payload)\n      }\n      localStorage.setItem('selectedItems', JSON.stringify(data));\n      return {\n        selectedItems: data\n      }\n  }\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialSelected);\n\n  const [employees, setEmployees] = useState<IAlphabet>({})\n\n  const fetchEmployees = async (): Promise<IEmployeeModel[]> => {\n    try {\n      return (await employeesService.getData())\n    } catch (error) {\n      console.log(error)\n      return [];\n    }\n  }\n\n  const groupElements = (array: IEmployeeModel[]): IAlphabet => {\n    return array.reduce((acc: IAlphabet, employee: IEmployeeModel) => {\n      acc[employee.lastName.charAt(0).toLocaleLowerCase()].push(employee)\n      return acc\n    }, alphabet);\n  }\n\n  const sortElements = (array: IEmployeeModel[]): IEmployeeModel[] => {\n    return array.sort((a: IEmployeeModel, b: IEmployeeModel): number => {\n      return a.lastName.localeCompare(b.lastName)\n    })\n  }\n\n  useEffect(() => {\n    fetchEmployees()\n      .then(sortElements)\n      .then(groupElements)\n      .then(setEmployees)\n  }, [])\n\n  return (\n    <Router basename='/'>\n      <EmployeesContextProvider value={{ employees: employees, setEmployees: () => {} }}>\n        <AppContextProvider value={{ selectedItems: state.selectedItems, setSelectedItems: dispatch }}>\n          <div className=\"app\">\n              <AppHeader />\n              <AppContent />\n              \n          </div>\n        </AppContextProvider>\n      </EmployeesContextProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}